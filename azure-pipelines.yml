trigger:
  branches:
    include:
    - main
    - develop
    - feature/*
    - release/*

variables:
  # Environment-specific variables are defined in the Azure DevOps pipeline
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: 'Build stage'
  jobs:
  - job: Build
    displayName: 'Build Angular application'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm run build
      displayName: 'Build application'

    - task: CopyFiles@2
      inputs:
        sourceFolder: 'dist'
        contents: '**'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
      displayName: 'Copy build files to artifact staging directory'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: 'drop'
      displayName: 'Publish build artifacts'

- stage: Test
  displayName: 'Test stage'
  dependsOn: Build
  jobs:
  - job: UnitTests
    displayName: 'Run unit tests'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      displayName: 'Run unit tests'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TESTS-*.xml'
        mergeTestResults: true
        testRunTitle: 'Unit Tests'
      displayName: 'Publish test results'
      condition: succeededOrFailed()

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/coverage/cobertura-coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/coverage'
      displayName: 'Publish code coverage'
      condition: succeededOrFailed()

  - job: E2ETests
    displayName: 'Run E2E tests'
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '20.x'
      displayName: 'Install Node.js'

    - script: |
        npm ci
      displayName: 'Install dependencies'

    - script: |
        echo "E2E tests will be implemented in a future step"
        # npm run e2e
      displayName: 'Run E2E tests (placeholder)'

- stage: DeployDev
  displayName: 'Deploy to Dev'
  dependsOn: Test
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/develop'))
  jobs:
  - deployment: DeployDev
    displayName: 'Deploy to Dev environment'
    environment: 'dev'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download build artifacts'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Azure-ARO-Dev'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Login to Azure Red Hat OpenShift
                az aro list -o table
                # Deploy to ARO using Helm or kubectl
                echo "Deploying to Dev environment"
            displayName: 'Deploy to ARO Dev'

- stage: DeployTest
  displayName: 'Deploy to Test'
  dependsOn: DeployDev
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/release/*'))
  jobs:
  - deployment: DeployTest
    displayName: 'Deploy to Test environment'
    environment: 'test'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download build artifacts'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Azure-ARO-Test'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Login to Azure Red Hat OpenShift
                az aro list -o table
                # Deploy to ARO using Helm or kubectl
                echo "Deploying to Test environment"
            displayName: 'Deploy to ARO Test'

- stage: DeployProd
  displayName: 'Deploy to Production'
  dependsOn: DeployTest
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  jobs:
  - deployment: DeployProd
    displayName: 'Deploy to Production environment'
    environment: 'prod'
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: 'drop'
              downloadPath: '$(System.ArtifactsDirectory)'
            displayName: 'Download build artifacts'

          - task: AzureCLI@2
            inputs:
              azureSubscription: 'Azure-ARO-Prod'
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Login to Azure Red Hat OpenShift
                az aro list -o table
                # Deploy to ARO using Helm or kubectl
                echo "Deploying to Production environment"
            displayName: 'Deploy to ARO Production'
